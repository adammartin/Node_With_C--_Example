// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoEqModel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoEqModel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EqModel {

namespace {

const ::google::protobuf::Descriptor* Offset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoConnectionRelationship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoConnectionRelationship_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorkingElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorkingElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorkingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorkingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorkingState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorkingState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorkingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorkingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquipmentModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquipmentModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EFrameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWorkingFunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EViewType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAxleLocation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipmentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERecordingSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConnectionPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHitchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoEqModel_2eproto() {
  protobuf_AddDesc_ProtoEqModel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoEqModel.proto");
  GOOGLE_CHECK(file != NULL);
  Offset_descriptor_ = file->message_type(0);
  static const int Offset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offset, inline__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offset, lateral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offset, height_),
  };
  Offset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offset_descriptor_,
      Offset::default_instance_,
      Offset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offset));
  ProtoConnection_descriptor_ = file->message_type(1);
  static const int ProtoConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnection, connectionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnection, connectionposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnection, hitchtype_),
  };
  ProtoConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoConnection_descriptor_,
      ProtoConnection::default_instance_,
      ProtoConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoConnection));
  ProtoConnectionRelationship_descriptor_ = file->message_type(2);
  static const int ProtoConnectionRelationship_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, sourceframeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, sourceconnectionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, targetframeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, targetconnectionindex_),
  };
  ProtoConnectionRelationship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoConnectionRelationship_descriptor_,
      ProtoConnectionRelationship::default_instance_,
      ProtoConnectionRelationship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoConnectionRelationship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoConnectionRelationship));
  ProtoRank_descriptor_ = file->message_type(3);
  static const int ProtoRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, localcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, childelementindex_),
  };
  ProtoRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRank_descriptor_,
      ProtoRank::default_instance_,
      ProtoRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRank));
  ProtoWorkingElement_descriptor_ = file->message_type(4);
  static const int ProtoWorkingElement_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, centeroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, elementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, parentelementindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, workingstateindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, childelementindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, workingdataindex_),
  };
  ProtoWorkingElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorkingElement_descriptor_,
      ProtoWorkingElement::default_instance_,
      ProtoWorkingElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorkingElement));
  ProtoWorkingData_descriptor_ = file->message_type(5);
  static const int ProtoWorkingData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, ddi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, controllable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, scalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, nativeunitofmeasure_),
  };
  ProtoWorkingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorkingData_descriptor_,
      ProtoWorkingData::default_instance_,
      ProtoWorkingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorkingData));
  ProtoWorkingState_descriptor_ = file->message_type(6);
  static const int ProtoWorkingState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, ddi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, controllable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, parentindex_),
  };
  ProtoWorkingState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorkingState_descriptor_,
      ProtoWorkingState::default_instance_,
      ProtoWorkingState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorkingState));
  ProtoWorkingFunction_descriptor_ = file->message_type(7);
  static const int ProtoWorkingFunction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, workingfunctiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, states_),
  };
  ProtoWorkingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorkingFunction_descriptor_,
      ProtoWorkingFunction::default_instance_,
      ProtoWorkingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorkingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorkingFunction));
  ProtoFrame_descriptor_ = file->message_type(8);
  static const int ProtoFrame_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, outofboxname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, releasedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, lastmodifieddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, frametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, equipmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, receiverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, receiveroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, droppoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, frontoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, implementlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, nonsteeringaxle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, turnradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, turnsensitivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, physicalwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, physicallength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, implementwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, rowwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, rowcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, inrowconfiguration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, trackspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, wheelbaseamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, configurationglobalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, workingfunctions_),
  };
  ProtoFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFrame_descriptor_,
      ProtoFrame::default_instance_,
      ProtoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFrame));
  ProtoEquipmentModel_descriptor_ = file->message_type(9);
  static const int ProtoEquipmentModel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, leadframeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, connectionrelationships_),
  };
  ProtoEquipmentModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquipmentModel_descriptor_,
      ProtoEquipmentModel::default_instance_,
      ProtoEquipmentModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipmentModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquipmentModel));
  EFrameType_descriptor_ = file->enum_type(0);
  EWorkingFunctionType_descriptor_ = file->enum_type(1);
  EViewType_descriptor_ = file->enum_type(2);
  EAxleLocation_descriptor_ = file->enum_type(3);
  EEquipmentType_descriptor_ = file->enum_type(4);
  ERecordingSource_descriptor_ = file->enum_type(5);
  EConnectionPosition_descriptor_ = file->enum_type(6);
  EHitchType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoEqModel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offset_descriptor_, &Offset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoConnection_descriptor_, &ProtoConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoConnectionRelationship_descriptor_, &ProtoConnectionRelationship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRank_descriptor_, &ProtoRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorkingElement_descriptor_, &ProtoWorkingElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorkingData_descriptor_, &ProtoWorkingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorkingState_descriptor_, &ProtoWorkingState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorkingFunction_descriptor_, &ProtoWorkingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFrame_descriptor_, &ProtoFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquipmentModel_descriptor_, &ProtoEquipmentModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoEqModel_2eproto() {
  delete Offset::default_instance_;
  delete Offset_reflection_;
  delete ProtoConnection::default_instance_;
  delete ProtoConnection_reflection_;
  delete ProtoConnectionRelationship::default_instance_;
  delete ProtoConnectionRelationship_reflection_;
  delete ProtoRank::default_instance_;
  delete ProtoRank_reflection_;
  delete ProtoWorkingElement::default_instance_;
  delete ProtoWorkingElement_reflection_;
  delete ProtoWorkingData::default_instance_;
  delete ProtoWorkingData_reflection_;
  delete ProtoWorkingState::default_instance_;
  delete ProtoWorkingState_reflection_;
  delete ProtoWorkingFunction::default_instance_;
  delete ProtoWorkingFunction_reflection_;
  delete ProtoFrame::default_instance_;
  delete ProtoFrame_reflection_;
  delete ProtoEquipmentModel::default_instance_;
  delete ProtoEquipmentModel_reflection_;
}

void protobuf_AddDesc_ProtoEqModel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoEqModel.proto\022\007EqModel\"9\n\006Offset\022"
    "\016\n\006Inline\030\001 \002(\001\022\017\n\007Lateral\030\002 \001(\001\022\016\n\006Heig"
    "ht\030\003 \001(\001\"\272\001\n\017ProtoConnection\022)\n\020Connecti"
    "onOffset\030\001 \002(\0132\017.EqModel.Offset\022F\n\022Conne"
    "ctionPosition\030\002 \001(\0162\034.EqModel.EConnectio"
    "nPosition:\014CP_UNDEFINED\0224\n\tHitchType\030\003 \001"
    "(\0162\023.EqModel.EHitchType:\014HT_UNDEFINED\"\217\001"
    "\n\033ProtoConnectionRelationship\022\030\n\020SourceF"
    "rameIndex\030\001 \002(\005\022\035\n\025SourceConnectionIndex"
    "\030\002 \001(\005\022\030\n\020TargetFrameIndex\030\003 \001(\005\022\035\n\025Targ"
    "etConnectionIndex\030\004 \001(\005\"k\n\tProtoRank\022\016\n\006"
    "RankID\030\001 \002(\r\022\r\n\005Width\030\002 \002(\001\022$\n\013LocalCent"
    "er\030\003 \001(\0132\017.EqModel.Offset\022\031\n\021ChildElemen"
    "tIndex\030\004 \003(\021\"\251\002\n\023ProtoWorkingElement\022\r\n\005"
    "Width\030\001 \002(\001\022%\n\014CenterOffset\030\002 \001(\0132\017.EqMo"
    "del.Offset\022\021\n\tElementID\030\003 \001(\r\0222\n\010ViewTyp"
    "e\030\004 \001(\0162\022.EqModel.EViewType:\014VT_UNDEFINE"
    "D\022\014\n\004Left\030\005 \001(\001\022\r\n\005Right\030\006 \001(\001\022\014\n\004Size\030\007"
    " \001(\001\022\032\n\022ParentElementIndex\030\010 \001(\021\022\031\n\021Work"
    "ingStateIndex\030\t \003(\021\022\031\n\021ChildElementIndex"
    "\030\n \003(\021\022\030\n\020WorkingDataIndex\030\013 \003(\021\"\231\001\n\020Pro"
    "toWorkingData\022\016\n\006DataId\030\001 \002(\r\022\013\n\003Ddi\030\002 \001"
    "(\r\022\020\n\010DomainId\030\003 \001(\r\022\024\n\014Controllable\030\004 \001"
    "(\010\022\016\n\006Offset\030\005 \001(\021\022\023\n\013ScaleFactor\030\006 \001(\001\022"
    "\033\n\023NativeUnitOfMeasure\030\007 \001(\t\"\235\001\n\021ProtoWo"
    "rkingState\022\n\n\002Id\030\001 \002(\r\022\013\n\003Ddi\030\002 \001(\r\022\020\n\010D"
    "omainId\030\003 \001(\r\022\024\n\014Controllable\030\004 \001(\010\0222\n\010V"
    "iewType\030\005 \001(\0162\022.EqModel.EViewType:\014VT_UN"
    "DEFINED\022\023\n\013ParentIndex\030\006 \001(\021\"\252\002\n\024ProtoWo"
    "rkingFunction\022\013\n\003Key\030\001 \002(\t\022\023\n\013Descriptio"
    "n\030\002 \001(\t\022H\n\023WorkingFunctionType\030\003 \001(\0162\035.E"
    "qModel.EWorkingFunctionType:\014WF_UNDEFINE"
    "D\022!\n\005Ranks\030\004 \003(\0132\022.EqModel.ProtoRank\022.\n\010"
    "Elements\030\005 \003(\0132\034.EqModel.ProtoWorkingEle"
    "ment\022\'\n\004Data\030\006 \003(\0132\031.EqModel.ProtoWorkin"
    "gData\022*\n\006States\030\007 \003(\0132\032.EqModel.ProtoWor"
    "kingState\"\364\006\n\nProtoFrame\022\013\n\003Key\030\001 \002(\t\022\023\n"
    "\013Description\030\002 \001(\t\022\024\n\014OutOfBoxName\030\003 \001(\t"
    "\022\023\n\013ReleaseDate\030\004 \001(\r\022\030\n\020LastModifiedDat"
    "e\030\005 \001(\r\0224\n\tFrameType\030\006 \001(\0162\023.EqModel.EFr"
    "ameType:\014FT_UNDEFINED\022<\n\rEquipmentType\030\007"
    " \001(\0162\027.EqModel.EEquipmentType:\014ET_UNDEFI"
    "NED\022\020\n\010Comments\030\010 \001(\t\022\022\n\nReceiverID\030\t \001("
    "\r\022\'\n\016ReceiverOffset\030\n \001(\0132\017.EqModel.Offs"
    "et\022\"\n\tDropPoint\030\013 \001(\0132\017.EqModel.Offset\022\023"
    "\n\013FrontOffset\030\014 \001(\001\022\027\n\017ImplementLength\030\r"
    " \001(\001\022=\n\017NonSteeringAxle\030\016 \001(\0162\026.EqModel."
    "EAxleLocation:\014AL_UNDEFINED\022\022\n\nTurnRadiu"
    "s\030\017 \001(\001\022\027\n\017TurnSensitivity\030\020 \001(\001\022\024\n\014Seri"
    "alNumber\030\021 \001(\t\022\025\n\rPhysicalWidth\030\022 \001(\001\022\026\n"
    "\016PhysicalLength\030\023 \001(\001\022\026\n\016ImplementWidth\030"
    "\024 \001(\001\022\020\n\010RowWidth\030\025 \001(\001\022\020\n\010RowCount\030\026 \001("
    "\r\022\032\n\022InRowConfiguration\030\027 \001(\010\022\024\n\014TrackSp"
    "acing\030\030 \001(\001\022\027\n\017WheelBaseAmount\030\031 \001(\001\022\017\n\007"
    "FrameId\030\032 \001(\r\022\035\n\025ConfigurationGlobalID\030\033"
    " \001(\t\022\r\n\005Model\030\034 \001(\t\022\013\n\003GPS\030\035 \001(\t\022-\n\013Conn"
    "ections\030\036 \003(\0132\030.EqModel.ProtoConnection\022"
    "7\n\020WorkingFunctions\030\037 \003(\0132\035.EqModel.Prot"
    "oWorkingFunction\"\246\001\n\023ProtoEquipmentModel"
    "\022\013\n\003Key\030\001 \002(\t\022\026\n\016LeadFrameIndex\030\002 \001(\005\022#\n"
    "\006Frames\030\003 \003(\0132\023.EqModel.ProtoFrame\022E\n\027Co"
    "nnectionRelationships\030\004 \003(\0132$.EqModel.Pr"
    "otoConnectionRelationship*@\n\nEFrameType\022"
    "\020\n\014FT_UNDEFINED\020\000\022\016\n\nFT_MACHINE\020\001\022\020\n\014FT_"
    "IMPLEMENT\020\002*\210\001\n\024EWorkingFunctionType\022\020\n\014"
    "WF_UNDEFINED\020\000\022\021\n\rWF_LOCOMOTION\020\001\022\016\n\nWF_"
    "HARVEST\020\002\022\032\n\026WF_PRODUCT_APPLICATION\020\003\022\017\n"
    "\013WF_PLANTING\020\004\022\016\n\nWF_TILLING\020\005*V\n\tEViewT"
    "ype\022\020\n\014VT_UNDEFINED\020\000\022\r\n\tVT_MASTER\020\001\022\014\n\010"
    "VT_METER\020\002\022\016\n\nVT_SECTION\020\003\022\n\n\006VT_ROW\020\004*F"
    "\n\rEAxleLocation\022\020\n\014AL_UNDEFINED\020\000\022\021\n\rAL_"
    "FRONT_AXLE\020\001\022\020\n\014AL_REAR_AXLE\020\002*\200\001\n\016EEqui"
    "pmentType\022\020\n\014ET_UNDEFINED\020\000\022\016\n\nET_TRACTO"
    "R\020\001\022\016\n\nET_COMBINE\020\002\022\016\n\nET_SPRAYER\020\003\022\017\n\013E"
    "T_SPREADER\020\004\022\r\n\tET_SEEDER\020\005\022\014\n\010ET_OTHER\020"
    "\006*\262\002\n\020ERecordingSource\022\020\n\014RS_UNDEFINED\020\000"
    "\022\r\n\tRS_MANUAL\020\001\022\013\n\007RS_AUTO\020\002\022\n\n\006RS_PTO\020\003"
    "\022\020\n\014RS_ACCUDEPTH\020\004\022\014\n\010RS_HITCH\020\005\022\013\n\007RS_S"
    "CV1\020\006\022\013\n\007RS_SCV2\020\007\022\013\n\007RS_SCV3\020\010\022\013\n\007RS_SC"
    "V4\020\t\022\013\n\007RS_SCV5\020\n\022\013\n\007RS_SCV6\020\013\022\013\n\007RS_SCV"
    "7\020\014\022\013\n\007RS_SCV8\020\r\022\013\n\007RS_SCV9\020\016\022\014\n\010RS_SCV1"
    "0\020\017\022\014\n\010RS_SCV11\020\020\022\014\n\010RS_SCV12\020\021\022\014\n\010RS_SC"
    "V13\020\022\022\027\n\023RS_IMPLEMENT_SWITCH\020\023*B\n\023EConne"
    "ctionPosition\022\020\n\014CP_UNDEFINED\020\000\022\014\n\010CP_FR"
    "ONT\020\001\022\013\n\007CP_REAR\020\002*\224\002\n\nEHitchType\022\020\n\014HT_"
    "UNDEFINED\020\000\022\026\n\022HT_TRACTOR_DRAWBAR\020\001\022%\n!H"
    "T_THREE_POINT_HITCH_SEMI_MOUNTED\020\002\022 \n\034HT"
    "_THREE_POINT_HITCH_MOUNTED\020\003\022\021\n\rHT_HITCH"
    "_HOOK\020\004\022\026\n\022HT_CLEVIS_COUPLING\020\005\022\032\n\026HT_PI"
    "TON_TYPE_COUPLING\020\006\022\021\n\rHT_CUNA_HITCH\020\007\022\021"
    "\n\rHT_BALL_HITCH\020\010\022&\n\"HT_THREE_POINT_HITC"
    "H_MOUNTED_FRONT\020\t", 3657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoEqModel.proto", &protobuf_RegisterTypes);
  Offset::default_instance_ = new Offset();
  ProtoConnection::default_instance_ = new ProtoConnection();
  ProtoConnectionRelationship::default_instance_ = new ProtoConnectionRelationship();
  ProtoRank::default_instance_ = new ProtoRank();
  ProtoWorkingElement::default_instance_ = new ProtoWorkingElement();
  ProtoWorkingData::default_instance_ = new ProtoWorkingData();
  ProtoWorkingState::default_instance_ = new ProtoWorkingState();
  ProtoWorkingFunction::default_instance_ = new ProtoWorkingFunction();
  ProtoFrame::default_instance_ = new ProtoFrame();
  ProtoEquipmentModel::default_instance_ = new ProtoEquipmentModel();
  Offset::default_instance_->InitAsDefaultInstance();
  ProtoConnection::default_instance_->InitAsDefaultInstance();
  ProtoConnectionRelationship::default_instance_->InitAsDefaultInstance();
  ProtoRank::default_instance_->InitAsDefaultInstance();
  ProtoWorkingElement::default_instance_->InitAsDefaultInstance();
  ProtoWorkingData::default_instance_->InitAsDefaultInstance();
  ProtoWorkingState::default_instance_->InitAsDefaultInstance();
  ProtoWorkingFunction::default_instance_->InitAsDefaultInstance();
  ProtoFrame::default_instance_->InitAsDefaultInstance();
  ProtoEquipmentModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoEqModel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoEqModel_2eproto {
  StaticDescriptorInitializer_ProtoEqModel_2eproto() {
    protobuf_AddDesc_ProtoEqModel_2eproto();
  }
} static_descriptor_initializer_ProtoEqModel_2eproto_;
const ::google::protobuf::EnumDescriptor* EFrameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFrameType_descriptor_;
}
bool EFrameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWorkingFunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWorkingFunctionType_descriptor_;
}
bool EWorkingFunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EViewType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EViewType_descriptor_;
}
bool EViewType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAxleLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAxleLocation_descriptor_;
}
bool EAxleLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipmentType_descriptor_;
}
bool EEquipmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERecordingSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERecordingSource_descriptor_;
}
bool ERecordingSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConnectionPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConnectionPosition_descriptor_;
}
bool EConnectionPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHitchType_descriptor_;
}
bool EHitchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Offset::kInlineFieldNumber;
const int Offset::kLateralFieldNumber;
const int Offset::kHeightFieldNumber;
#endif  // !_MSC_VER

Offset::Offset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offset::InitAsDefaultInstance() {
}

Offset::Offset(const Offset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offset::SharedCtor() {
  _cached_size_ = 0;
  inline__ = 0;
  lateral_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offset::~Offset() {
  SharedDtor();
}

void Offset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offset_descriptor_;
}

const Offset& Offset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

Offset* Offset::default_instance_ = NULL;

Offset* Offset::New() const {
  return new Offset;
}

void Offset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inline__ = 0;
    lateral_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Inline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inline__)));
          set_has_inline_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Lateral;
        break;
      }

      // optional double Lateral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Lateral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_)));
          set_has_lateral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Height;
        break;
      }

      // optional double Height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Inline = 1;
  if (has_inline_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->inline_(), output);
  }

  // optional double Lateral = 2;
  if (has_lateral()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lateral(), output);
  }

  // optional double Height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Inline = 1;
  if (has_inline_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->inline_(), target);
  }

  // optional double Lateral = 2;
  if (has_lateral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lateral(), target);
  }

  // optional double Height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Inline = 1;
    if (has_inline_()) {
      total_size += 1 + 8;
    }

    // optional double Lateral = 2;
    if (has_lateral()) {
      total_size += 1 + 8;
    }

    // optional double Height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offset::MergeFrom(const Offset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inline_()) {
      set_inline_(from.inline_());
    }
    if (from.has_lateral()) {
      set_lateral(from.lateral());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offset::CopyFrom(const Offset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Offset::Swap(Offset* other) {
  if (other != this) {
    std::swap(inline__, other->inline__);
    std::swap(lateral_, other->lateral_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offset_descriptor_;
  metadata.reflection = Offset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoConnection::kConnectionOffsetFieldNumber;
const int ProtoConnection::kConnectionPositionFieldNumber;
const int ProtoConnection::kHitchTypeFieldNumber;
#endif  // !_MSC_VER

ProtoConnection::ProtoConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoConnection::InitAsDefaultInstance() {
  connectionoffset_ = const_cast< ::EqModel::Offset*>(&::EqModel::Offset::default_instance());
}

ProtoConnection::ProtoConnection(const ProtoConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoConnection::SharedCtor() {
  _cached_size_ = 0;
  connectionoffset_ = NULL;
  connectionposition_ = 0;
  hitchtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoConnection::~ProtoConnection() {
  SharedDtor();
}

void ProtoConnection::SharedDtor() {
  if (this != default_instance_) {
    delete connectionoffset_;
  }
}

void ProtoConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoConnection_descriptor_;
}

const ProtoConnection& ProtoConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoConnection* ProtoConnection::default_instance_ = NULL;

ProtoConnection* ProtoConnection::New() const {
  return new ProtoConnection;
}

void ProtoConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectionoffset()) {
      if (connectionoffset_ != NULL) connectionoffset_->::EqModel::Offset::Clear();
    }
    connectionposition_ = 0;
    hitchtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EqModel.Offset ConnectionOffset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ConnectionPosition;
        break;
      }

      // optional .EqModel.EConnectionPosition ConnectionPosition = 2 [default = CP_UNDEFINED];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConnectionPosition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EConnectionPosition_IsValid(value)) {
            set_connectionposition(static_cast< ::EqModel::EConnectionPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HitchType;
        break;
      }

      // optional .EqModel.EHitchType HitchType = 3 [default = HT_UNDEFINED];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EHitchType_IsValid(value)) {
            set_hitchtype(static_cast< ::EqModel::EHitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EqModel.Offset ConnectionOffset = 1;
  if (has_connectionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connectionoffset(), output);
  }

  // optional .EqModel.EConnectionPosition ConnectionPosition = 2 [default = CP_UNDEFINED];
  if (has_connectionposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectionposition(), output);
  }

  // optional .EqModel.EHitchType HitchType = 3 [default = HT_UNDEFINED];
  if (has_hitchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->hitchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EqModel.Offset ConnectionOffset = 1;
  if (has_connectionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connectionoffset(), target);
  }

  // optional .EqModel.EConnectionPosition ConnectionPosition = 2 [default = CP_UNDEFINED];
  if (has_connectionposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectionposition(), target);
  }

  // optional .EqModel.EHitchType HitchType = 3 [default = HT_UNDEFINED];
  if (has_hitchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->hitchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EqModel.Offset ConnectionOffset = 1;
    if (has_connectionoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectionoffset());
    }

    // optional .EqModel.EConnectionPosition ConnectionPosition = 2 [default = CP_UNDEFINED];
    if (has_connectionposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectionposition());
    }

    // optional .EqModel.EHitchType HitchType = 3 [default = HT_UNDEFINED];
    if (has_hitchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hitchtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoConnection::MergeFrom(const ProtoConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectionoffset()) {
      mutable_connectionoffset()->::EqModel::Offset::MergeFrom(from.connectionoffset());
    }
    if (from.has_connectionposition()) {
      set_connectionposition(from.connectionposition());
    }
    if (from.has_hitchtype()) {
      set_hitchtype(from.hitchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoConnection::CopyFrom(const ProtoConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_connectionoffset()) {
    if (!this->connectionoffset().IsInitialized()) return false;
  }
  return true;
}

void ProtoConnection::Swap(ProtoConnection* other) {
  if (other != this) {
    std::swap(connectionoffset_, other->connectionoffset_);
    std::swap(connectionposition_, other->connectionposition_);
    std::swap(hitchtype_, other->hitchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoConnection_descriptor_;
  metadata.reflection = ProtoConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoConnectionRelationship::kSourceFrameIndexFieldNumber;
const int ProtoConnectionRelationship::kSourceConnectionIndexFieldNumber;
const int ProtoConnectionRelationship::kTargetFrameIndexFieldNumber;
const int ProtoConnectionRelationship::kTargetConnectionIndexFieldNumber;
#endif  // !_MSC_VER

ProtoConnectionRelationship::ProtoConnectionRelationship()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoConnectionRelationship::InitAsDefaultInstance() {
}

ProtoConnectionRelationship::ProtoConnectionRelationship(const ProtoConnectionRelationship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoConnectionRelationship::SharedCtor() {
  _cached_size_ = 0;
  sourceframeindex_ = 0;
  sourceconnectionindex_ = 0;
  targetframeindex_ = 0;
  targetconnectionindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoConnectionRelationship::~ProtoConnectionRelationship() {
  SharedDtor();
}

void ProtoConnectionRelationship::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoConnectionRelationship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoConnectionRelationship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoConnectionRelationship_descriptor_;
}

const ProtoConnectionRelationship& ProtoConnectionRelationship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoConnectionRelationship* ProtoConnectionRelationship::default_instance_ = NULL;

ProtoConnectionRelationship* ProtoConnectionRelationship::New() const {
  return new ProtoConnectionRelationship;
}

void ProtoConnectionRelationship::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceframeindex_ = 0;
    sourceconnectionindex_ = 0;
    targetframeindex_ = 0;
    targetconnectionindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoConnectionRelationship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SourceFrameIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceframeindex_)));
          set_has_sourceframeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SourceConnectionIndex;
        break;
      }

      // optional int32 SourceConnectionIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourceConnectionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceconnectionindex_)));
          set_has_sourceconnectionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TargetFrameIndex;
        break;
      }

      // optional int32 TargetFrameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetFrameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetframeindex_)));
          set_has_targetframeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TargetConnectionIndex;
        break;
      }

      // optional int32 TargetConnectionIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetConnectionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetconnectionindex_)));
          set_has_targetconnectionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoConnectionRelationship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SourceFrameIndex = 1;
  if (has_sourceframeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sourceframeindex(), output);
  }

  // optional int32 SourceConnectionIndex = 2;
  if (has_sourceconnectionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceconnectionindex(), output);
  }

  // optional int32 TargetFrameIndex = 3;
  if (has_targetframeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetframeindex(), output);
  }

  // optional int32 TargetConnectionIndex = 4;
  if (has_targetconnectionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetconnectionindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoConnectionRelationship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SourceFrameIndex = 1;
  if (has_sourceframeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sourceframeindex(), target);
  }

  // optional int32 SourceConnectionIndex = 2;
  if (has_sourceconnectionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceconnectionindex(), target);
  }

  // optional int32 TargetFrameIndex = 3;
  if (has_targetframeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetframeindex(), target);
  }

  // optional int32 TargetConnectionIndex = 4;
  if (has_targetconnectionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetconnectionindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoConnectionRelationship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SourceFrameIndex = 1;
    if (has_sourceframeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceframeindex());
    }

    // optional int32 SourceConnectionIndex = 2;
    if (has_sourceconnectionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceconnectionindex());
    }

    // optional int32 TargetFrameIndex = 3;
    if (has_targetframeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetframeindex());
    }

    // optional int32 TargetConnectionIndex = 4;
    if (has_targetconnectionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetconnectionindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoConnectionRelationship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoConnectionRelationship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoConnectionRelationship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoConnectionRelationship::MergeFrom(const ProtoConnectionRelationship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceframeindex()) {
      set_sourceframeindex(from.sourceframeindex());
    }
    if (from.has_sourceconnectionindex()) {
      set_sourceconnectionindex(from.sourceconnectionindex());
    }
    if (from.has_targetframeindex()) {
      set_targetframeindex(from.targetframeindex());
    }
    if (from.has_targetconnectionindex()) {
      set_targetconnectionindex(from.targetconnectionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoConnectionRelationship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoConnectionRelationship::CopyFrom(const ProtoConnectionRelationship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoConnectionRelationship::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProtoConnectionRelationship::Swap(ProtoConnectionRelationship* other) {
  if (other != this) {
    std::swap(sourceframeindex_, other->sourceframeindex_);
    std::swap(sourceconnectionindex_, other->sourceconnectionindex_);
    std::swap(targetframeindex_, other->targetframeindex_);
    std::swap(targetconnectionindex_, other->targetconnectionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoConnectionRelationship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoConnectionRelationship_descriptor_;
  metadata.reflection = ProtoConnectionRelationship_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRank::kRankIDFieldNumber;
const int ProtoRank::kWidthFieldNumber;
const int ProtoRank::kLocalCenterFieldNumber;
const int ProtoRank::kChildElementIndexFieldNumber;
#endif  // !_MSC_VER

ProtoRank::ProtoRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRank::InitAsDefaultInstance() {
  localcenter_ = const_cast< ::EqModel::Offset*>(&::EqModel::Offset::default_instance());
}

ProtoRank::ProtoRank(const ProtoRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRank::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  width_ = 0;
  localcenter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRank::~ProtoRank() {
  SharedDtor();
}

void ProtoRank::SharedDtor() {
  if (this != default_instance_) {
    delete localcenter_;
  }
}

void ProtoRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRank_descriptor_;
}

const ProtoRank& ProtoRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoRank* ProtoRank::default_instance_ = NULL;

ProtoRank* ProtoRank::New() const {
  return new ProtoRank;
}

void ProtoRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0u;
    width_ = 0;
    if (has_localcenter()) {
      if (localcenter_ != NULL) localcenter_->::EqModel::Offset::Clear();
    }
  }
  childelementindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Width;
        break;
      }

      // required double Width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LocalCenter;
        break;
      }

      // optional .EqModel.Offset LocalCenter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LocalCenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localcenter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ChildElementIndex;
        break;
      }

      // repeated sint32 ChildElementIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildElementIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 32, input, this->mutable_childelementindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_childelementindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ChildElementIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankID = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // required double Width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // optional .EqModel.Offset LocalCenter = 3;
  if (has_localcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->localcenter(), output);
  }

  // repeated sint32 ChildElementIndex = 4;
  for (int i = 0; i < this->childelementindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      4, this->childelementindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 RankID = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // required double Width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // optional .EqModel.Offset LocalCenter = 3;
  if (has_localcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->localcenter(), target);
  }

  // repeated sint32 ChildElementIndex = 4;
  for (int i = 0; i < this->childelementindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(4, this->childelementindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankID = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required double Width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional .EqModel.Offset LocalCenter = 3;
    if (has_localcenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localcenter());
    }

  }
  // repeated sint32 ChildElementIndex = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->childelementindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->childelementindex(i));
    }
    total_size += 1 * this->childelementindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRank::MergeFrom(const ProtoRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  childelementindex_.MergeFrom(from.childelementindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_localcenter()) {
      mutable_localcenter()->::EqModel::Offset::MergeFrom(from.localcenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRank::CopyFrom(const ProtoRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_localcenter()) {
    if (!this->localcenter().IsInitialized()) return false;
  }
  return true;
}

void ProtoRank::Swap(ProtoRank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(width_, other->width_);
    std::swap(localcenter_, other->localcenter_);
    childelementindex_.Swap(&other->childelementindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRank_descriptor_;
  metadata.reflection = ProtoRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorkingElement::kWidthFieldNumber;
const int ProtoWorkingElement::kCenterOffsetFieldNumber;
const int ProtoWorkingElement::kElementIDFieldNumber;
const int ProtoWorkingElement::kViewTypeFieldNumber;
const int ProtoWorkingElement::kLeftFieldNumber;
const int ProtoWorkingElement::kRightFieldNumber;
const int ProtoWorkingElement::kSizeFieldNumber;
const int ProtoWorkingElement::kParentElementIndexFieldNumber;
const int ProtoWorkingElement::kWorkingStateIndexFieldNumber;
const int ProtoWorkingElement::kChildElementIndexFieldNumber;
const int ProtoWorkingElement::kWorkingDataIndexFieldNumber;
#endif  // !_MSC_VER

ProtoWorkingElement::ProtoWorkingElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorkingElement::InitAsDefaultInstance() {
  centeroffset_ = const_cast< ::EqModel::Offset*>(&::EqModel::Offset::default_instance());
}

ProtoWorkingElement::ProtoWorkingElement(const ProtoWorkingElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorkingElement::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  centeroffset_ = NULL;
  elementid_ = 0u;
  viewtype_ = 0;
  left_ = 0;
  right_ = 0;
  size_ = 0;
  parentelementindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorkingElement::~ProtoWorkingElement() {
  SharedDtor();
}

void ProtoWorkingElement::SharedDtor() {
  if (this != default_instance_) {
    delete centeroffset_;
  }
}

void ProtoWorkingElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorkingElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorkingElement_descriptor_;
}

const ProtoWorkingElement& ProtoWorkingElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoWorkingElement* ProtoWorkingElement::default_instance_ = NULL;

ProtoWorkingElement* ProtoWorkingElement::New() const {
  return new ProtoWorkingElement;
}

void ProtoWorkingElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    if (has_centeroffset()) {
      if (centeroffset_ != NULL) centeroffset_->::EqModel::Offset::Clear();
    }
    elementid_ = 0u;
    viewtype_ = 0;
    left_ = 0;
    right_ = 0;
    size_ = 0;
    parentelementindex_ = 0;
  }
  workingstateindex_.Clear();
  childelementindex_.Clear();
  workingdataindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorkingElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CenterOffset;
        break;
      }

      // optional .EqModel.Offset CenterOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CenterOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centeroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementID;
        break;
      }

      // optional uint32 ElementID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ViewType;
        break;
      }

      // optional .EqModel.EViewType ViewType = 4 [default = VT_UNDEFINED];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EViewType_IsValid(value)) {
            set_viewtype(static_cast< ::EqModel::EViewType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Left;
        break;
      }

      // optional double Left = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Right;
        break;
      }

      // optional double Right = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Size;
        break;
      }

      // optional double Size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ParentElementIndex;
        break;
      }

      // optional sint32 ParentElementIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentElementIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentelementindex_)));
          set_has_parentelementindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WorkingStateIndex;
        break;
      }

      // repeated sint32 WorkingStateIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorkingStateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 72, input, this->mutable_workingstateindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_workingstateindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WorkingStateIndex;
        if (input->ExpectTag(80)) goto parse_ChildElementIndex;
        break;
      }

      // repeated sint32 ChildElementIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildElementIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 80, input, this->mutable_childelementindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_childelementindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ChildElementIndex;
        if (input->ExpectTag(88)) goto parse_WorkingDataIndex;
        break;
      }

      // repeated sint32 WorkingDataIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorkingDataIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 88, input, this->mutable_workingdataindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_workingdataindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WorkingDataIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorkingElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // optional .EqModel.Offset CenterOffset = 2;
  if (has_centeroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->centeroffset(), output);
  }

  // optional uint32 ElementID = 3;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementid(), output);
  }

  // optional .EqModel.EViewType ViewType = 4 [default = VT_UNDEFINED];
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->viewtype(), output);
  }

  // optional double Left = 5;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->left(), output);
  }

  // optional double Right = 6;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right(), output);
  }

  // optional double Size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->size(), output);
  }

  // optional sint32 ParentElementIndex = 8;
  if (has_parentelementindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->parentelementindex(), output);
  }

  // repeated sint32 WorkingStateIndex = 9;
  for (int i = 0; i < this->workingstateindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      9, this->workingstateindex(i), output);
  }

  // repeated sint32 ChildElementIndex = 10;
  for (int i = 0; i < this->childelementindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      10, this->childelementindex(i), output);
  }

  // repeated sint32 WorkingDataIndex = 11;
  for (int i = 0; i < this->workingdataindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      11, this->workingdataindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorkingElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // optional .EqModel.Offset CenterOffset = 2;
  if (has_centeroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->centeroffset(), target);
  }

  // optional uint32 ElementID = 3;
  if (has_elementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->elementid(), target);
  }

  // optional .EqModel.EViewType ViewType = 4 [default = VT_UNDEFINED];
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->viewtype(), target);
  }

  // optional double Left = 5;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->left(), target);
  }

  // optional double Right = 6;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right(), target);
  }

  // optional double Size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->size(), target);
  }

  // optional sint32 ParentElementIndex = 8;
  if (has_parentelementindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->parentelementindex(), target);
  }

  // repeated sint32 WorkingStateIndex = 9;
  for (int i = 0; i < this->workingstateindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(9, this->workingstateindex(i), target);
  }

  // repeated sint32 ChildElementIndex = 10;
  for (int i = 0; i < this->childelementindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(10, this->childelementindex(i), target);
  }

  // repeated sint32 WorkingDataIndex = 11;
  for (int i = 0; i < this->workingdataindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(11, this->workingdataindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorkingElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Width = 1;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional .EqModel.Offset CenterOffset = 2;
    if (has_centeroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centeroffset());
    }

    // optional uint32 ElementID = 3;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // optional .EqModel.EViewType ViewType = 4 [default = VT_UNDEFINED];
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->viewtype());
    }

    // optional double Left = 5;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double Right = 6;
    if (has_right()) {
      total_size += 1 + 8;
    }

    // optional double Size = 7;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // optional sint32 ParentElementIndex = 8;
    if (has_parentelementindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentelementindex());
    }

  }
  // repeated sint32 WorkingStateIndex = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->workingstateindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->workingstateindex(i));
    }
    total_size += 1 * this->workingstateindex_size() + data_size;
  }

  // repeated sint32 ChildElementIndex = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->childelementindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->childelementindex(i));
    }
    total_size += 1 * this->childelementindex_size() + data_size;
  }

  // repeated sint32 WorkingDataIndex = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->workingdataindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->workingdataindex(i));
    }
    total_size += 1 * this->workingdataindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorkingElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorkingElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorkingElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorkingElement::MergeFrom(const ProtoWorkingElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  workingstateindex_.MergeFrom(from.workingstateindex_);
  childelementindex_.MergeFrom(from.childelementindex_);
  workingdataindex_.MergeFrom(from.workingdataindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_centeroffset()) {
      mutable_centeroffset()->::EqModel::Offset::MergeFrom(from.centeroffset());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_parentelementindex()) {
      set_parentelementindex(from.parentelementindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorkingElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorkingElement::CopyFrom(const ProtoWorkingElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorkingElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_centeroffset()) {
    if (!this->centeroffset().IsInitialized()) return false;
  }
  return true;
}

void ProtoWorkingElement::Swap(ProtoWorkingElement* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(centeroffset_, other->centeroffset_);
    std::swap(elementid_, other->elementid_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(size_, other->size_);
    std::swap(parentelementindex_, other->parentelementindex_);
    workingstateindex_.Swap(&other->workingstateindex_);
    childelementindex_.Swap(&other->childelementindex_);
    workingdataindex_.Swap(&other->workingdataindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorkingElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorkingElement_descriptor_;
  metadata.reflection = ProtoWorkingElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorkingData::kDataIdFieldNumber;
const int ProtoWorkingData::kDdiFieldNumber;
const int ProtoWorkingData::kDomainIdFieldNumber;
const int ProtoWorkingData::kControllableFieldNumber;
const int ProtoWorkingData::kOffsetFieldNumber;
const int ProtoWorkingData::kScaleFactorFieldNumber;
const int ProtoWorkingData::kNativeUnitOfMeasureFieldNumber;
#endif  // !_MSC_VER

ProtoWorkingData::ProtoWorkingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorkingData::InitAsDefaultInstance() {
}

ProtoWorkingData::ProtoWorkingData(const ProtoWorkingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorkingData::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0u;
  ddi_ = 0u;
  domainid_ = 0u;
  controllable_ = false;
  offset_ = 0;
  scalefactor_ = 0;
  nativeunitofmeasure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorkingData::~ProtoWorkingData() {
  SharedDtor();
}

void ProtoWorkingData::SharedDtor() {
  if (nativeunitofmeasure_ != &::google::protobuf::internal::kEmptyString) {
    delete nativeunitofmeasure_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWorkingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorkingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorkingData_descriptor_;
}

const ProtoWorkingData& ProtoWorkingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoWorkingData* ProtoWorkingData::default_instance_ = NULL;

ProtoWorkingData* ProtoWorkingData::New() const {
  return new ProtoWorkingData;
}

void ProtoWorkingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataid_ = 0u;
    ddi_ = 0u;
    domainid_ = 0u;
    controllable_ = false;
    offset_ = 0;
    scalefactor_ = 0;
    if (has_nativeunitofmeasure()) {
      if (nativeunitofmeasure_ != &::google::protobuf::internal::kEmptyString) {
        nativeunitofmeasure_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorkingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DataId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ddi;
        break;
      }

      // optional uint32 Ddi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ddi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddi_)));
          set_has_ddi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DomainId;
        break;
      }

      // optional uint32 DomainId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DomainId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domainid_)));
          set_has_domainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Controllable;
        break;
      }

      // optional bool Controllable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Controllable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controllable_)));
          set_has_controllable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Offset;
        break;
      }

      // optional sint32 Offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ScaleFactor;
        break;
      }

      // optional double ScaleFactor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scalefactor_)));
          set_has_scalefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_NativeUnitOfMeasure;
        break;
      }

      // optional string NativeUnitOfMeasure = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NativeUnitOfMeasure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nativeunitofmeasure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nativeunitofmeasure().data(), this->nativeunitofmeasure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorkingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DataId = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dataid(), output);
  }

  // optional uint32 Ddi = 2;
  if (has_ddi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ddi(), output);
  }

  // optional uint32 DomainId = 3;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->domainid(), output);
  }

  // optional bool Controllable = 4;
  if (has_controllable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->controllable(), output);
  }

  // optional sint32 Offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->offset(), output);
  }

  // optional double ScaleFactor = 6;
  if (has_scalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->scalefactor(), output);
  }

  // optional string NativeUnitOfMeasure = 7;
  if (has_nativeunitofmeasure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nativeunitofmeasure().data(), this->nativeunitofmeasure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nativeunitofmeasure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorkingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 DataId = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dataid(), target);
  }

  // optional uint32 Ddi = 2;
  if (has_ddi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ddi(), target);
  }

  // optional uint32 DomainId = 3;
  if (has_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->domainid(), target);
  }

  // optional bool Controllable = 4;
  if (has_controllable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->controllable(), target);
  }

  // optional sint32 Offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->offset(), target);
  }

  // optional double ScaleFactor = 6;
  if (has_scalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->scalefactor(), target);
  }

  // optional string NativeUnitOfMeasure = 7;
  if (has_nativeunitofmeasure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nativeunitofmeasure().data(), this->nativeunitofmeasure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nativeunitofmeasure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorkingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DataId = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

    // optional uint32 Ddi = 2;
    if (has_ddi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ddi());
    }

    // optional uint32 DomainId = 3;
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domainid());
    }

    // optional bool Controllable = 4;
    if (has_controllable()) {
      total_size += 1 + 1;
    }

    // optional sint32 Offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->offset());
    }

    // optional double ScaleFactor = 6;
    if (has_scalefactor()) {
      total_size += 1 + 8;
    }

    // optional string NativeUnitOfMeasure = 7;
    if (has_nativeunitofmeasure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nativeunitofmeasure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorkingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorkingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorkingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorkingData::MergeFrom(const ProtoWorkingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_ddi()) {
      set_ddi(from.ddi());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
    if (from.has_controllable()) {
      set_controllable(from.controllable());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_scalefactor()) {
      set_scalefactor(from.scalefactor());
    }
    if (from.has_nativeunitofmeasure()) {
      set_nativeunitofmeasure(from.nativeunitofmeasure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorkingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorkingData::CopyFrom(const ProtoWorkingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorkingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProtoWorkingData::Swap(ProtoWorkingData* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(ddi_, other->ddi_);
    std::swap(domainid_, other->domainid_);
    std::swap(controllable_, other->controllable_);
    std::swap(offset_, other->offset_);
    std::swap(scalefactor_, other->scalefactor_);
    std::swap(nativeunitofmeasure_, other->nativeunitofmeasure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorkingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorkingData_descriptor_;
  metadata.reflection = ProtoWorkingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorkingState::kIdFieldNumber;
const int ProtoWorkingState::kDdiFieldNumber;
const int ProtoWorkingState::kDomainIdFieldNumber;
const int ProtoWorkingState::kControllableFieldNumber;
const int ProtoWorkingState::kViewTypeFieldNumber;
const int ProtoWorkingState::kParentIndexFieldNumber;
#endif  // !_MSC_VER

ProtoWorkingState::ProtoWorkingState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorkingState::InitAsDefaultInstance() {
}

ProtoWorkingState::ProtoWorkingState(const ProtoWorkingState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorkingState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ddi_ = 0u;
  domainid_ = 0u;
  controllable_ = false;
  viewtype_ = 0;
  parentindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorkingState::~ProtoWorkingState() {
  SharedDtor();
}

void ProtoWorkingState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoWorkingState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorkingState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorkingState_descriptor_;
}

const ProtoWorkingState& ProtoWorkingState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoWorkingState* ProtoWorkingState::default_instance_ = NULL;

ProtoWorkingState* ProtoWorkingState::New() const {
  return new ProtoWorkingState;
}

void ProtoWorkingState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ddi_ = 0u;
    domainid_ = 0u;
    controllable_ = false;
    viewtype_ = 0;
    parentindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorkingState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ddi;
        break;
      }

      // optional uint32 Ddi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ddi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddi_)));
          set_has_ddi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DomainId;
        break;
      }

      // optional uint32 DomainId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DomainId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domainid_)));
          set_has_domainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Controllable;
        break;
      }

      // optional bool Controllable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Controllable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controllable_)));
          set_has_controllable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ViewType;
        break;
      }

      // optional .EqModel.EViewType ViewType = 5 [default = VT_UNDEFINED];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EViewType_IsValid(value)) {
            set_viewtype(static_cast< ::EqModel::EViewType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ParentIndex;
        break;
      }

      // optional sint32 ParentIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentindex_)));
          set_has_parentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorkingState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Ddi = 2;
  if (has_ddi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ddi(), output);
  }

  // optional uint32 DomainId = 3;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->domainid(), output);
  }

  // optional bool Controllable = 4;
  if (has_controllable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->controllable(), output);
  }

  // optional .EqModel.EViewType ViewType = 5 [default = VT_UNDEFINED];
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->viewtype(), output);
  }

  // optional sint32 ParentIndex = 6;
  if (has_parentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->parentindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorkingState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Ddi = 2;
  if (has_ddi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ddi(), target);
  }

  // optional uint32 DomainId = 3;
  if (has_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->domainid(), target);
  }

  // optional bool Controllable = 4;
  if (has_controllable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->controllable(), target);
  }

  // optional .EqModel.EViewType ViewType = 5 [default = VT_UNDEFINED];
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->viewtype(), target);
  }

  // optional sint32 ParentIndex = 6;
  if (has_parentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->parentindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorkingState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Ddi = 2;
    if (has_ddi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ddi());
    }

    // optional uint32 DomainId = 3;
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domainid());
    }

    // optional bool Controllable = 4;
    if (has_controllable()) {
      total_size += 1 + 1;
    }

    // optional .EqModel.EViewType ViewType = 5 [default = VT_UNDEFINED];
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->viewtype());
    }

    // optional sint32 ParentIndex = 6;
    if (has_parentindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorkingState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorkingState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorkingState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorkingState::MergeFrom(const ProtoWorkingState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ddi()) {
      set_ddi(from.ddi());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
    if (from.has_controllable()) {
      set_controllable(from.controllable());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_parentindex()) {
      set_parentindex(from.parentindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorkingState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorkingState::CopyFrom(const ProtoWorkingState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorkingState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProtoWorkingState::Swap(ProtoWorkingState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ddi_, other->ddi_);
    std::swap(domainid_, other->domainid_);
    std::swap(controllable_, other->controllable_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(parentindex_, other->parentindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorkingState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorkingState_descriptor_;
  metadata.reflection = ProtoWorkingState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorkingFunction::kKeyFieldNumber;
const int ProtoWorkingFunction::kDescriptionFieldNumber;
const int ProtoWorkingFunction::kWorkingFunctionTypeFieldNumber;
const int ProtoWorkingFunction::kRanksFieldNumber;
const int ProtoWorkingFunction::kElementsFieldNumber;
const int ProtoWorkingFunction::kDataFieldNumber;
const int ProtoWorkingFunction::kStatesFieldNumber;
#endif  // !_MSC_VER

ProtoWorkingFunction::ProtoWorkingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorkingFunction::InitAsDefaultInstance() {
}

ProtoWorkingFunction::ProtoWorkingFunction(const ProtoWorkingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorkingFunction::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  workingfunctiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorkingFunction::~ProtoWorkingFunction() {
  SharedDtor();
}

void ProtoWorkingFunction::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWorkingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorkingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorkingFunction_descriptor_;
}

const ProtoWorkingFunction& ProtoWorkingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoWorkingFunction* ProtoWorkingFunction::default_instance_ = NULL;

ProtoWorkingFunction* ProtoWorkingFunction::New() const {
  return new ProtoWorkingFunction;
}

void ProtoWorkingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    workingfunctiontype_ = 0;
  }
  ranks_.Clear();
  elements_.Clear();
  data_.Clear();
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorkingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Description;
        break;
      }

      // optional string Description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WorkingFunctionType;
        break;
      }

      // optional .EqModel.EWorkingFunctionType WorkingFunctionType = 3 [default = WF_UNDEFINED];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorkingFunctionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EWorkingFunctionType_IsValid(value)) {
            set_workingfunctiontype(static_cast< ::EqModel::EWorkingFunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Ranks;
        break;
      }

      // repeated .EqModel.ProtoRank Ranks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Ranks;
        if (input->ExpectTag(42)) goto parse_Elements;
        break;
      }

      // repeated .EqModel.ProtoWorkingElement Elements = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Elements;
        if (input->ExpectTag(50)) goto parse_Data;
        break;
      }

      // repeated .EqModel.ProtoWorkingData Data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Data;
        if (input->ExpectTag(58)) goto parse_States;
        break;
      }

      // repeated .EqModel.ProtoWorkingState States = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_States:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_States;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorkingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional .EqModel.EWorkingFunctionType WorkingFunctionType = 3 [default = WF_UNDEFINED];
  if (has_workingfunctiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->workingfunctiontype(), output);
  }

  // repeated .EqModel.ProtoRank Ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranks(i), output);
  }

  // repeated .EqModel.ProtoWorkingElement Elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elements(i), output);
  }

  // repeated .EqModel.ProtoWorkingData Data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  // repeated .EqModel.ProtoWorkingState States = 7;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorkingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .EqModel.EWorkingFunctionType WorkingFunctionType = 3 [default = WF_UNDEFINED];
  if (has_workingfunctiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->workingfunctiontype(), target);
  }

  // repeated .EqModel.ProtoRank Ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranks(i), target);
  }

  // repeated .EqModel.ProtoWorkingElement Elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elements(i), target);
  }

  // repeated .EqModel.ProtoWorkingData Data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  // repeated .EqModel.ProtoWorkingState States = 7;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorkingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .EqModel.EWorkingFunctionType WorkingFunctionType = 3 [default = WF_UNDEFINED];
    if (has_workingfunctiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->workingfunctiontype());
    }

  }
  // repeated .EqModel.ProtoRank Ranks = 4;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  // repeated .EqModel.ProtoWorkingElement Elements = 5;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  // repeated .EqModel.ProtoWorkingData Data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .EqModel.ProtoWorkingState States = 7;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorkingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorkingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorkingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorkingFunction::MergeFrom(const ProtoWorkingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  elements_.MergeFrom(from.elements_);
  data_.MergeFrom(from.data_);
  states_.MergeFrom(from.states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_workingfunctiontype()) {
      set_workingfunctiontype(from.workingfunctiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorkingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorkingFunction::CopyFrom(const ProtoWorkingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorkingFunction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ranks_size(); i++) {
    if (!this->ranks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < states_size(); i++) {
    if (!this->states(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoWorkingFunction::Swap(ProtoWorkingFunction* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(description_, other->description_);
    std::swap(workingfunctiontype_, other->workingfunctiontype_);
    ranks_.Swap(&other->ranks_);
    elements_.Swap(&other->elements_);
    data_.Swap(&other->data_);
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorkingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorkingFunction_descriptor_;
  metadata.reflection = ProtoWorkingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFrame::kKeyFieldNumber;
const int ProtoFrame::kDescriptionFieldNumber;
const int ProtoFrame::kOutOfBoxNameFieldNumber;
const int ProtoFrame::kReleaseDateFieldNumber;
const int ProtoFrame::kLastModifiedDateFieldNumber;
const int ProtoFrame::kFrameTypeFieldNumber;
const int ProtoFrame::kEquipmentTypeFieldNumber;
const int ProtoFrame::kCommentsFieldNumber;
const int ProtoFrame::kReceiverIDFieldNumber;
const int ProtoFrame::kReceiverOffsetFieldNumber;
const int ProtoFrame::kDropPointFieldNumber;
const int ProtoFrame::kFrontOffsetFieldNumber;
const int ProtoFrame::kImplementLengthFieldNumber;
const int ProtoFrame::kNonSteeringAxleFieldNumber;
const int ProtoFrame::kTurnRadiusFieldNumber;
const int ProtoFrame::kTurnSensitivityFieldNumber;
const int ProtoFrame::kSerialNumberFieldNumber;
const int ProtoFrame::kPhysicalWidthFieldNumber;
const int ProtoFrame::kPhysicalLengthFieldNumber;
const int ProtoFrame::kImplementWidthFieldNumber;
const int ProtoFrame::kRowWidthFieldNumber;
const int ProtoFrame::kRowCountFieldNumber;
const int ProtoFrame::kInRowConfigurationFieldNumber;
const int ProtoFrame::kTrackSpacingFieldNumber;
const int ProtoFrame::kWheelBaseAmountFieldNumber;
const int ProtoFrame::kFrameIdFieldNumber;
const int ProtoFrame::kConfigurationGlobalIDFieldNumber;
const int ProtoFrame::kModelFieldNumber;
const int ProtoFrame::kGPSFieldNumber;
const int ProtoFrame::kConnectionsFieldNumber;
const int ProtoFrame::kWorkingFunctionsFieldNumber;
#endif  // !_MSC_VER

ProtoFrame::ProtoFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFrame::InitAsDefaultInstance() {
  receiveroffset_ = const_cast< ::EqModel::Offset*>(&::EqModel::Offset::default_instance());
  droppoint_ = const_cast< ::EqModel::Offset*>(&::EqModel::Offset::default_instance());
}

ProtoFrame::ProtoFrame(const ProtoFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFrame::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outofboxname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  releasedate_ = 0u;
  lastmodifieddate_ = 0u;
  frametype_ = 0;
  equipmenttype_ = 0;
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverid_ = 0u;
  receiveroffset_ = NULL;
  droppoint_ = NULL;
  frontoffset_ = 0;
  implementlength_ = 0;
  nonsteeringaxle_ = 0;
  turnradius_ = 0;
  turnsensitivity_ = 0;
  serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  physicalwidth_ = 0;
  physicallength_ = 0;
  implementwidth_ = 0;
  rowwidth_ = 0;
  rowcount_ = 0u;
  inrowconfiguration_ = false;
  trackspacing_ = 0;
  wheelbaseamount_ = 0;
  frameid_ = 0u;
  configurationglobalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFrame::~ProtoFrame() {
  SharedDtor();
}

void ProtoFrame::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (outofboxname_ != &::google::protobuf::internal::kEmptyString) {
    delete outofboxname_;
  }
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    delete comments_;
  }
  if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete serialnumber_;
  }
  if (configurationglobalid_ != &::google::protobuf::internal::kEmptyString) {
    delete configurationglobalid_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (gps_ != &::google::protobuf::internal::kEmptyString) {
    delete gps_;
  }
  if (this != default_instance_) {
    delete receiveroffset_;
    delete droppoint_;
  }
}

void ProtoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFrame_descriptor_;
}

const ProtoFrame& ProtoFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoFrame* ProtoFrame::default_instance_ = NULL;

ProtoFrame* ProtoFrame::New() const {
  return new ProtoFrame;
}

void ProtoFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_outofboxname()) {
      if (outofboxname_ != &::google::protobuf::internal::kEmptyString) {
        outofboxname_->clear();
      }
    }
    releasedate_ = 0u;
    lastmodifieddate_ = 0u;
    frametype_ = 0;
    equipmenttype_ = 0;
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::kEmptyString) {
        comments_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    receiverid_ = 0u;
    if (has_receiveroffset()) {
      if (receiveroffset_ != NULL) receiveroffset_->::EqModel::Offset::Clear();
    }
    if (has_droppoint()) {
      if (droppoint_ != NULL) droppoint_->::EqModel::Offset::Clear();
    }
    frontoffset_ = 0;
    implementlength_ = 0;
    nonsteeringaxle_ = 0;
    turnradius_ = 0;
    turnsensitivity_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_serialnumber()) {
      if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        serialnumber_->clear();
      }
    }
    physicalwidth_ = 0;
    physicallength_ = 0;
    implementwidth_ = 0;
    rowwidth_ = 0;
    rowcount_ = 0u;
    inrowconfiguration_ = false;
    trackspacing_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    wheelbaseamount_ = 0;
    frameid_ = 0u;
    if (has_configurationglobalid()) {
      if (configurationglobalid_ != &::google::protobuf::internal::kEmptyString) {
        configurationglobalid_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_gps()) {
      if (gps_ != &::google::protobuf::internal::kEmptyString) {
        gps_->clear();
      }
    }
  }
  connections_.Clear();
  workingfunctions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Description;
        break;
      }

      // optional string Description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OutOfBoxName;
        break;
      }

      // optional string OutOfBoxName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OutOfBoxName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outofboxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outofboxname().data(), this->outofboxname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ReleaseDate;
        break;
      }

      // optional uint32 ReleaseDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReleaseDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &releasedate_)));
          set_has_releasedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LastModifiedDate;
        break;
      }

      // optional uint32 LastModifiedDate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastModifiedDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmodifieddate_)));
          set_has_lastmodifieddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FrameType;
        break;
      }

      // optional .EqModel.EFrameType FrameType = 6 [default = FT_UNDEFINED];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EFrameType_IsValid(value)) {
            set_frametype(static_cast< ::EqModel::EFrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_EquipmentType;
        break;
      }

      // optional .EqModel.EEquipmentType EquipmentType = 7 [default = ET_UNDEFINED];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipmentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EEquipmentType_IsValid(value)) {
            set_equipmenttype(static_cast< ::EqModel::EEquipmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Comments;
        break;
      }

      // optional string Comments = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ReceiverID;
        break;
      }

      // optional uint32 ReceiverID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReceiverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ReceiverOffset;
        break;
      }

      // optional .EqModel.Offset ReceiverOffset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReceiverOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_DropPoint;
        break;
      }

      // optional .EqModel.Offset DropPoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DropPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_droppoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_FrontOffset;
        break;
      }

      // optional double FrontOffset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrontOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frontoffset_)));
          set_has_frontoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ImplementLength;
        break;
      }

      // optional double ImplementLength = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ImplementLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implementlength_)));
          set_has_implementlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_NonSteeringAxle;
        break;
      }

      // optional .EqModel.EAxleLocation NonSteeringAxle = 14 [default = AL_UNDEFINED];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NonSteeringAxle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EqModel::EAxleLocation_IsValid(value)) {
            set_nonsteeringaxle(static_cast< ::EqModel::EAxleLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_TurnRadius;
        break;
      }

      // optional double TurnRadius = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TurnRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnradius_)));
          set_has_turnradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_TurnSensitivity;
        break;
      }

      // optional double TurnSensitivity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TurnSensitivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnsensitivity_)));
          set_has_turnsensitivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_SerialNumber;
        break;
      }

      // optional string SerialNumber = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_PhysicalWidth;
        break;
      }

      // optional double PhysicalWidth = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PhysicalWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &physicalwidth_)));
          set_has_physicalwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PhysicalLength;
        break;
      }

      // optional double PhysicalLength = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PhysicalLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &physicallength_)));
          set_has_physicallength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_ImplementWidth;
        break;
      }

      // optional double ImplementWidth = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ImplementWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implementwidth_)));
          set_has_implementwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_RowWidth;
        break;
      }

      // optional double RowWidth = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RowWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rowwidth_)));
          set_has_rowwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_RowCount;
        break;
      }

      // optional uint32 RowCount = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RowCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcount_)));
          set_has_rowcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_InRowConfiguration;
        break;
      }

      // optional bool InRowConfiguration = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InRowConfiguration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inrowconfiguration_)));
          set_has_inrowconfiguration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_TrackSpacing;
        break;
      }

      // optional double TrackSpacing = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrackSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trackspacing_)));
          set_has_trackspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_WheelBaseAmount;
        break;
      }

      // optional double WheelBaseAmount = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WheelBaseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelbaseamount_)));
          set_has_wheelbaseamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_FrameId;
        break;
      }

      // optional uint32 FrameId = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_ConfigurationGlobalID;
        break;
      }

      // optional string ConfigurationGlobalID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConfigurationGlobalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configurationglobalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configurationglobalid().data(), this->configurationglobalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_Model;
        break;
      }

      // optional string Model = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_GPS;
        break;
      }

      // optional string GPS = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GPS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gps().data(), this->gps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Connections;
        break;
      }

      // repeated .EqModel.ProtoConnection Connections = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Connections;
        if (input->ExpectTag(250)) goto parse_WorkingFunctions;
        break;
      }

      // repeated .EqModel.ProtoWorkingFunction WorkingFunctions = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WorkingFunctions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workingfunctions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_WorkingFunctions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional string OutOfBoxName = 3;
  if (has_outofboxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outofboxname().data(), this->outofboxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->outofboxname(), output);
  }

  // optional uint32 ReleaseDate = 4;
  if (has_releasedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->releasedate(), output);
  }

  // optional uint32 LastModifiedDate = 5;
  if (has_lastmodifieddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastmodifieddate(), output);
  }

  // optional .EqModel.EFrameType FrameType = 6 [default = FT_UNDEFINED];
  if (has_frametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->frametype(), output);
  }

  // optional .EqModel.EEquipmentType EquipmentType = 7 [default = ET_UNDEFINED];
  if (has_equipmenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->equipmenttype(), output);
  }

  // optional string Comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comments(), output);
  }

  // optional uint32 ReceiverID = 9;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->receiverid(), output);
  }

  // optional .EqModel.Offset ReceiverOffset = 10;
  if (has_receiveroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->receiveroffset(), output);
  }

  // optional .EqModel.Offset DropPoint = 11;
  if (has_droppoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->droppoint(), output);
  }

  // optional double FrontOffset = 12;
  if (has_frontoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frontoffset(), output);
  }

  // optional double ImplementLength = 13;
  if (has_implementlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->implementlength(), output);
  }

  // optional .EqModel.EAxleLocation NonSteeringAxle = 14 [default = AL_UNDEFINED];
  if (has_nonsteeringaxle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->nonsteeringaxle(), output);
  }

  // optional double TurnRadius = 15;
  if (has_turnradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->turnradius(), output);
  }

  // optional double TurnSensitivity = 16;
  if (has_turnsensitivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->turnsensitivity(), output);
  }

  // optional string SerialNumber = 17;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->serialnumber(), output);
  }

  // optional double PhysicalWidth = 18;
  if (has_physicalwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->physicalwidth(), output);
  }

  // optional double PhysicalLength = 19;
  if (has_physicallength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->physicallength(), output);
  }

  // optional double ImplementWidth = 20;
  if (has_implementwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->implementwidth(), output);
  }

  // optional double RowWidth = 21;
  if (has_rowwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->rowwidth(), output);
  }

  // optional uint32 RowCount = 22;
  if (has_rowcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->rowcount(), output);
  }

  // optional bool InRowConfiguration = 23;
  if (has_inrowconfiguration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->inrowconfiguration(), output);
  }

  // optional double TrackSpacing = 24;
  if (has_trackspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->trackspacing(), output);
  }

  // optional double WheelBaseAmount = 25;
  if (has_wheelbaseamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->wheelbaseamount(), output);
  }

  // optional uint32 FrameId = 26;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->frameid(), output);
  }

  // optional string ConfigurationGlobalID = 27;
  if (has_configurationglobalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationglobalid().data(), this->configurationglobalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->configurationglobalid(), output);
  }

  // optional string Model = 28;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->model(), output);
  }

  // optional string GPS = 29;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->gps(), output);
  }

  // repeated .EqModel.ProtoConnection Connections = 30;
  for (int i = 0; i < this->connections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->connections(i), output);
  }

  // repeated .EqModel.ProtoWorkingFunction WorkingFunctions = 31;
  for (int i = 0; i < this->workingfunctions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->workingfunctions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string OutOfBoxName = 3;
  if (has_outofboxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outofboxname().data(), this->outofboxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->outofboxname(), target);
  }

  // optional uint32 ReleaseDate = 4;
  if (has_releasedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->releasedate(), target);
  }

  // optional uint32 LastModifiedDate = 5;
  if (has_lastmodifieddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastmodifieddate(), target);
  }

  // optional .EqModel.EFrameType FrameType = 6 [default = FT_UNDEFINED];
  if (has_frametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->frametype(), target);
  }

  // optional .EqModel.EEquipmentType EquipmentType = 7 [default = ET_UNDEFINED];
  if (has_equipmenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->equipmenttype(), target);
  }

  // optional string Comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comments(), target);
  }

  // optional uint32 ReceiverID = 9;
  if (has_receiverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->receiverid(), target);
  }

  // optional .EqModel.Offset ReceiverOffset = 10;
  if (has_receiveroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->receiveroffset(), target);
  }

  // optional .EqModel.Offset DropPoint = 11;
  if (has_droppoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->droppoint(), target);
  }

  // optional double FrontOffset = 12;
  if (has_frontoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frontoffset(), target);
  }

  // optional double ImplementLength = 13;
  if (has_implementlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->implementlength(), target);
  }

  // optional .EqModel.EAxleLocation NonSteeringAxle = 14 [default = AL_UNDEFINED];
  if (has_nonsteeringaxle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->nonsteeringaxle(), target);
  }

  // optional double TurnRadius = 15;
  if (has_turnradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->turnradius(), target);
  }

  // optional double TurnSensitivity = 16;
  if (has_turnsensitivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->turnsensitivity(), target);
  }

  // optional string SerialNumber = 17;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->serialnumber(), target);
  }

  // optional double PhysicalWidth = 18;
  if (has_physicalwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->physicalwidth(), target);
  }

  // optional double PhysicalLength = 19;
  if (has_physicallength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->physicallength(), target);
  }

  // optional double ImplementWidth = 20;
  if (has_implementwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->implementwidth(), target);
  }

  // optional double RowWidth = 21;
  if (has_rowwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->rowwidth(), target);
  }

  // optional uint32 RowCount = 22;
  if (has_rowcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->rowcount(), target);
  }

  // optional bool InRowConfiguration = 23;
  if (has_inrowconfiguration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->inrowconfiguration(), target);
  }

  // optional double TrackSpacing = 24;
  if (has_trackspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->trackspacing(), target);
  }

  // optional double WheelBaseAmount = 25;
  if (has_wheelbaseamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->wheelbaseamount(), target);
  }

  // optional uint32 FrameId = 26;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->frameid(), target);
  }

  // optional string ConfigurationGlobalID = 27;
  if (has_configurationglobalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationglobalid().data(), this->configurationglobalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->configurationglobalid(), target);
  }

  // optional string Model = 28;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->model(), target);
  }

  // optional string GPS = 29;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->gps(), target);
  }

  // repeated .EqModel.ProtoConnection Connections = 30;
  for (int i = 0; i < this->connections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->connections(i), target);
  }

  // repeated .EqModel.ProtoWorkingFunction WorkingFunctions = 31;
  for (int i = 0; i < this->workingfunctions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->workingfunctions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string OutOfBoxName = 3;
    if (has_outofboxname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outofboxname());
    }

    // optional uint32 ReleaseDate = 4;
    if (has_releasedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->releasedate());
    }

    // optional uint32 LastModifiedDate = 5;
    if (has_lastmodifieddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmodifieddate());
    }

    // optional .EqModel.EFrameType FrameType = 6 [default = FT_UNDEFINED];
    if (has_frametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frametype());
    }

    // optional .EqModel.EEquipmentType EquipmentType = 7 [default = ET_UNDEFINED];
    if (has_equipmenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equipmenttype());
    }

    // optional string Comments = 8;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ReceiverID = 9;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiverid());
    }

    // optional .EqModel.Offset ReceiverOffset = 10;
    if (has_receiveroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveroffset());
    }

    // optional .EqModel.Offset DropPoint = 11;
    if (has_droppoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->droppoint());
    }

    // optional double FrontOffset = 12;
    if (has_frontoffset()) {
      total_size += 1 + 8;
    }

    // optional double ImplementLength = 13;
    if (has_implementlength()) {
      total_size += 1 + 8;
    }

    // optional .EqModel.EAxleLocation NonSteeringAxle = 14 [default = AL_UNDEFINED];
    if (has_nonsteeringaxle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nonsteeringaxle());
    }

    // optional double TurnRadius = 15;
    if (has_turnradius()) {
      total_size += 1 + 8;
    }

    // optional double TurnSensitivity = 16;
    if (has_turnsensitivity()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string SerialNumber = 17;
    if (has_serialnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialnumber());
    }

    // optional double PhysicalWidth = 18;
    if (has_physicalwidth()) {
      total_size += 2 + 8;
    }

    // optional double PhysicalLength = 19;
    if (has_physicallength()) {
      total_size += 2 + 8;
    }

    // optional double ImplementWidth = 20;
    if (has_implementwidth()) {
      total_size += 2 + 8;
    }

    // optional double RowWidth = 21;
    if (has_rowwidth()) {
      total_size += 2 + 8;
    }

    // optional uint32 RowCount = 22;
    if (has_rowcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowcount());
    }

    // optional bool InRowConfiguration = 23;
    if (has_inrowconfiguration()) {
      total_size += 2 + 1;
    }

    // optional double TrackSpacing = 24;
    if (has_trackspacing()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double WheelBaseAmount = 25;
    if (has_wheelbaseamount()) {
      total_size += 2 + 8;
    }

    // optional uint32 FrameId = 26;
    if (has_frameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional string ConfigurationGlobalID = 27;
    if (has_configurationglobalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configurationglobalid());
    }

    // optional string Model = 28;
    if (has_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string GPS = 29;
    if (has_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps());
    }

  }
  // repeated .EqModel.ProtoConnection Connections = 30;
  total_size += 2 * this->connections_size();
  for (int i = 0; i < this->connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connections(i));
  }

  // repeated .EqModel.ProtoWorkingFunction WorkingFunctions = 31;
  total_size += 2 * this->workingfunctions_size();
  for (int i = 0; i < this->workingfunctions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workingfunctions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFrame::MergeFrom(const ProtoFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  connections_.MergeFrom(from.connections_);
  workingfunctions_.MergeFrom(from.workingfunctions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_outofboxname()) {
      set_outofboxname(from.outofboxname());
    }
    if (from.has_releasedate()) {
      set_releasedate(from.releasedate());
    }
    if (from.has_lastmodifieddate()) {
      set_lastmodifieddate(from.lastmodifieddate());
    }
    if (from.has_frametype()) {
      set_frametype(from.frametype());
    }
    if (from.has_equipmenttype()) {
      set_equipmenttype(from.equipmenttype());
    }
    if (from.has_comments()) {
      set_comments(from.comments());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_receiveroffset()) {
      mutable_receiveroffset()->::EqModel::Offset::MergeFrom(from.receiveroffset());
    }
    if (from.has_droppoint()) {
      mutable_droppoint()->::EqModel::Offset::MergeFrom(from.droppoint());
    }
    if (from.has_frontoffset()) {
      set_frontoffset(from.frontoffset());
    }
    if (from.has_implementlength()) {
      set_implementlength(from.implementlength());
    }
    if (from.has_nonsteeringaxle()) {
      set_nonsteeringaxle(from.nonsteeringaxle());
    }
    if (from.has_turnradius()) {
      set_turnradius(from.turnradius());
    }
    if (from.has_turnsensitivity()) {
      set_turnsensitivity(from.turnsensitivity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_physicalwidth()) {
      set_physicalwidth(from.physicalwidth());
    }
    if (from.has_physicallength()) {
      set_physicallength(from.physicallength());
    }
    if (from.has_implementwidth()) {
      set_implementwidth(from.implementwidth());
    }
    if (from.has_rowwidth()) {
      set_rowwidth(from.rowwidth());
    }
    if (from.has_rowcount()) {
      set_rowcount(from.rowcount());
    }
    if (from.has_inrowconfiguration()) {
      set_inrowconfiguration(from.inrowconfiguration());
    }
    if (from.has_trackspacing()) {
      set_trackspacing(from.trackspacing());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_wheelbaseamount()) {
      set_wheelbaseamount(from.wheelbaseamount());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_configurationglobalid()) {
      set_configurationglobalid(from.configurationglobalid());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_gps()) {
      set_gps(from.gps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFrame::CopyFrom(const ProtoFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_receiveroffset()) {
    if (!this->receiveroffset().IsInitialized()) return false;
  }
  if (has_droppoint()) {
    if (!this->droppoint().IsInitialized()) return false;
  }
  for (int i = 0; i < connections_size(); i++) {
    if (!this->connections(i).IsInitialized()) return false;
  }
  for (int i = 0; i < workingfunctions_size(); i++) {
    if (!this->workingfunctions(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoFrame::Swap(ProtoFrame* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(description_, other->description_);
    std::swap(outofboxname_, other->outofboxname_);
    std::swap(releasedate_, other->releasedate_);
    std::swap(lastmodifieddate_, other->lastmodifieddate_);
    std::swap(frametype_, other->frametype_);
    std::swap(equipmenttype_, other->equipmenttype_);
    std::swap(comments_, other->comments_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(receiveroffset_, other->receiveroffset_);
    std::swap(droppoint_, other->droppoint_);
    std::swap(frontoffset_, other->frontoffset_);
    std::swap(implementlength_, other->implementlength_);
    std::swap(nonsteeringaxle_, other->nonsteeringaxle_);
    std::swap(turnradius_, other->turnradius_);
    std::swap(turnsensitivity_, other->turnsensitivity_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(physicalwidth_, other->physicalwidth_);
    std::swap(physicallength_, other->physicallength_);
    std::swap(implementwidth_, other->implementwidth_);
    std::swap(rowwidth_, other->rowwidth_);
    std::swap(rowcount_, other->rowcount_);
    std::swap(inrowconfiguration_, other->inrowconfiguration_);
    std::swap(trackspacing_, other->trackspacing_);
    std::swap(wheelbaseamount_, other->wheelbaseamount_);
    std::swap(frameid_, other->frameid_);
    std::swap(configurationglobalid_, other->configurationglobalid_);
    std::swap(model_, other->model_);
    std::swap(gps_, other->gps_);
    connections_.Swap(&other->connections_);
    workingfunctions_.Swap(&other->workingfunctions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFrame_descriptor_;
  metadata.reflection = ProtoFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquipmentModel::kKeyFieldNumber;
const int ProtoEquipmentModel::kLeadFrameIndexFieldNumber;
const int ProtoEquipmentModel::kFramesFieldNumber;
const int ProtoEquipmentModel::kConnectionRelationshipsFieldNumber;
#endif  // !_MSC_VER

ProtoEquipmentModel::ProtoEquipmentModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquipmentModel::InitAsDefaultInstance() {
}

ProtoEquipmentModel::ProtoEquipmentModel(const ProtoEquipmentModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquipmentModel::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leadframeindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquipmentModel::~ProtoEquipmentModel() {
  SharedDtor();
}

void ProtoEquipmentModel::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ProtoEquipmentModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquipmentModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquipmentModel_descriptor_;
}

const ProtoEquipmentModel& ProtoEquipmentModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEqModel_2eproto();
  return *default_instance_;
}

ProtoEquipmentModel* ProtoEquipmentModel::default_instance_ = NULL;

ProtoEquipmentModel* ProtoEquipmentModel::New() const {
  return new ProtoEquipmentModel;
}

void ProtoEquipmentModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    leadframeindex_ = 0;
  }
  frames_.Clear();
  connectionrelationships_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquipmentModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeadFrameIndex;
        break;
      }

      // optional int32 LeadFrameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeadFrameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadframeindex_)));
          set_has_leadframeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Frames;
        break;
      }

      // repeated .EqModel.ProtoFrame Frames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Frames;
        if (input->ExpectTag(34)) goto parse_ConnectionRelationships;
        break;
      }

      // repeated .EqModel.ProtoConnectionRelationship ConnectionRelationships = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionRelationships:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connectionrelationships()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConnectionRelationships;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquipmentModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional int32 LeadFrameIndex = 2;
  if (has_leadframeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leadframeindex(), output);
  }

  // repeated .EqModel.ProtoFrame Frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frames(i), output);
  }

  // repeated .EqModel.ProtoConnectionRelationship ConnectionRelationships = 4;
  for (int i = 0; i < this->connectionrelationships_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connectionrelationships(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquipmentModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 LeadFrameIndex = 2;
  if (has_leadframeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leadframeindex(), target);
  }

  // repeated .EqModel.ProtoFrame Frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frames(i), target);
  }

  // repeated .EqModel.ProtoConnectionRelationship ConnectionRelationships = 4;
  for (int i = 0; i < this->connectionrelationships_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connectionrelationships(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquipmentModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 LeadFrameIndex = 2;
    if (has_leadframeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadframeindex());
    }

  }
  // repeated .EqModel.ProtoFrame Frames = 3;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  // repeated .EqModel.ProtoConnectionRelationship ConnectionRelationships = 4;
  total_size += 1 * this->connectionrelationships_size();
  for (int i = 0; i < this->connectionrelationships_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connectionrelationships(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquipmentModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquipmentModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquipmentModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquipmentModel::MergeFrom(const ProtoEquipmentModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  connectionrelationships_.MergeFrom(from.connectionrelationships_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_leadframeindex()) {
      set_leadframeindex(from.leadframeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquipmentModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquipmentModel::CopyFrom(const ProtoEquipmentModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquipmentModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  for (int i = 0; i < connectionrelationships_size(); i++) {
    if (!this->connectionrelationships(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoEquipmentModel::Swap(ProtoEquipmentModel* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(leadframeindex_, other->leadframeindex_);
    frames_.Swap(&other->frames_);
    connectionrelationships_.Swap(&other->connectionrelationships_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquipmentModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquipmentModel_descriptor_;
  metadata.reflection = ProtoEquipmentModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EqModel

// @@protoc_insertion_point(global_scope)
